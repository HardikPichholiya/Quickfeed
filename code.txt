public_form. html = 

<form method="POST" action="{{ url_for('main.submit_feedback') }}" class="feedback-form">
<input type="hidden" name="bill_id" value="{{ bill.id }}">

            <div class="form-group">
                {{ form.rating.label(class="form-label") }}
                {{ form.rating(class="form-select", id="rating") }}
            </div>

            <div class="form-group">
                {{ form.content.label(class="form-label") }}
                {{ form.content(class="form-input form-textarea", id="content") }}
            </div> 
 ------------------------------------------------------------------------------------------------------------           

 models.py = 

 class Item(db.Model):
    __tablename__ = 'items'

    id = db.Column(db.Integer, primary_key=True)
    shopkeeper_id = db.Column(db.Integer, db.ForeignKey('shopkeepers.id'), nullable=False)
    name = db.Column(db.String(100), nullable=False)
    price = db.Column(db.Float, nullable=False)
    shopkeeper = db.relationship('Shopkeeper', backref=db.backref('items', lazy=True))

class Bill(db.Model):
    __tablename__ = 'bills'

    id = db.Column(db.Integer, primary_key=True)
    shopkeeper_id = db.Column(db.Integer, db.ForeignKey('shopkeepers.id'), nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    total_price = db.Column(db.Float, nullable=False)
    loyalty_code = db.Column(db.String(4), unique=True, nullable=True)
    loyalty_used = db.Column(db.Boolean, default=False)
    loyalty_points_earned = db.Column(db.Integer, default=0)
    shopkeeper = db.relationship('Shopkeeper', backref=db.backref('bills', lazy=True))


class BillItem(db.Model):
    __tablename__ = 'bill_items'

    id = db.Column(db.Integer, primary_key=True)
    bill_id = db.Column(db.Integer, db.ForeignKey('bills.id'), nullable=False)
    item_id = db.Column(db.Integer, db.ForeignKey('items.id'), nullable=False)
    quantity = db.Column(db.Integer, nullable=False)
    price_per_unit = db.Column(db.Float, nullable=False)

    bill = db.relationship('Bill', backref=db.backref('bill_items', lazy=True))
    item = db.relationship('Item', backref=db.backref('bill_items', lazy=True))
------------------------------------------------------------------------------------------------------------

 __init__.py =

 def inject_now():
    from datetime import datetime
    return {'now': datetime.now}
------------------------------------------------------------------------------------------------------------ 

routes.py = 

from web.models import User, Feedback, Shopkeeper, Item , Bill

removed =     
    # @staticmethod
    # def get_top_keywords(shopkeeper_id, limit=10):
    #     """Get most common keywords from feedback content"""
    #     try:
    #         feedbacks = Feedback.query.filter_by(shopkeeper_id=shopkeeper_id).all()
            
    #         # Extract words from all feedback content
    #         all_words = []
    #         stop_words = {'the', 'a', 'an', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for', 'of', 'with', 'by', 'is', 'was', 'are', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'do', 'does', 'did', 'will', 'would', 'could', 'should', 'may', 'might', 'can', 'this', 'that', 'these', 'those', 'i', 'you', 'he', 'she', 'it', 'we', 'they', 'me', 'him', 'her', 'us', 'them', 'my', 'your', 'his', 'hers', 'its', 'our', 'their'}
            
    #         for feedback in feedbacks:
    #             # Extract words (letters only, minimum 3 characters)
    #             import re
    #             words = re.findall(r'\b[a-zA-Z]{3,}\b', feedback.content.lower())
    #             words.extend(re.findall(r'\b[a-zA-Z]{3,}\b', feedback.title.lower()))
                
    #             # Filter out stop words
    #             words = [word for word in words if word not in stop_words]
    #             all_words.extend(words)
            
    #         # Count word frequency
    #         from collections import Counter
    #         word_counts = Counter(all_words)
    #         return word_counts.most_common(limit)
            
    #     except Exception as e:
    #         print(f"Error getting top keywords: {e}")
    #         return []


@main.route('/submit-feedback', methods=['POST'])
@login_required
def submit_feedback():
    rating = int(request.form.get('rating'))
    feedback_text = request.form.get('feedback_text')
    bill_id = request.form.get('bill_id')  # This must be sent with form
    customer_id = current_user.id

    bill = Bill.query.get_or_404(bill_id)
    shopkeeper = Shopkeeper.query.get_or_404(bill.shopkeeper_id)

    # Save feedback
    feedback = Feedback(
        rating=rating,
        text=feedback_text,
        customer_id=customer_id,
        bill_id=bill.id
    )
    db.session.add(feedback)

    # Loyalty logic
    if (
        bill.total_amount >= shopkeeper.minimum_spend_threshold and
        rating >= 4 and
        len(feedback_text.strip().split()) > 20
    ):
        if bill.loyalty_code is None:
            from web.utils import generate_unique_loyalty_code
            bill.loyalty_code = generate_unique_loyalty_code()

    db.session.commit()
    return redirect(url_for('main.feedback_success'))

@main.route('/dashboard/item-setup', methods=['GET'])
@login_required
@require_shopkeeper
def item_setup():
    items = Item.query.filter_by(shopkeeper_id=current_user.id).all()
    return render_template('setup.html', items=items)

@main.route('/dashboard/item-setup', methods=['POST'])
@login_required
@require_shopkeeper
def add_item():
    """Add a new item to the shopkeeper's list"""
    try:
        name = request.form.get('name')
        price = float(request.form.get('price'))
        shopkeeper_id = current_user.id

        if not name or price < 0:
            flash("Invalid item data.", "warning")
            return redirect(url_for('main.item_setup'))

        new_item = Item(name=name.strip(), price=price, shopkeeper_id=shopkeeper_id)
        db.session.add(new_item)
        db.session.commit()

        flash("Item added successfully!", "success")
        return redirect(url_for('main.item_setup'))

    except Exception as e:
        db.session.rollback()
        print(f"Error adding item: {e}")
        flash("Failed to add item.", "danger")
        return redirect(url_for('main.item_setup'))

@main.route('/dashboard/delete-item/<int:item_id>', methods=['POST'])
@login_required
@require_shopkeeper
def delete_item(item_id):
    """Delete an item from the shopkeeper's list"""
    try:
        item = Item.query.get(item_id)
        if item and item.shopkeeper_id == current_user.id:
            db.session.delete(item)
            db.session.commit()
            flash("Item deleted successfully!", "success")
        else:
            flash("Item not found or unauthorized.", "danger")
    except Exception as e:
        db.session.rollback()
        print(f"Error deleting item: {e}")
        flash("Failed to delete item.", "danger")
    return redirect(url_for('main.item_setup'))

@main.route('/dashboard/generate-bill', methods=['GET', 'POST'])
@login_required
@require_shopkeeper
def generate_bill():
    if request.method == 'GET':
        items = Item.query.filter_by(shopkeeper_id=current_user.id).all()
        return render_template('generate_bill.html', items=items)

    # Handle AJAX POST
    items = Item.query.filter_by(shopkeeper_id=current_user.id).all()
    selected_items = []
    total_price = 0

    for item in items:
        if request.form.get(f'item_{item.id}'):
            qty = int(request.form.get(f'qty_{item.id}', 1))
            item_total = qty * item.price
            total_price += item_total
            selected_items.append({
                'item': item,
                'quantity': qty,
                'item_total': item_total
            })

    # ‚úÖ Create and store the Bill object in DB
    from datetime import datetime
    from web.utils import generate_unique_loyalty_code
    from web.models import Bill  # adjust import path as needed

    bill = Bill(
        customer_id=None,  # if customers aren't tied yet, keep this None
        shopkeeper_id=current_user.id,
        total_amount=total_price
    )

    # Optional: generate loyalty code here or later during feedback step
    # bill.loyalty_code = generate_unique_loyalty_code()

    db.session.add(bill)
    db.session.commit()

    # ‚úÖ Pass the Bill object to the template
    return render_template(
        'partials/bill_snippet.html',
        selected_items=selected_items,
        total_price=total_price,
        now=datetime.now,
        bill=bill  # ‚úÖ <-- this is what was missing
    )












    <!-- {% if bill.loyalty_code %}
    <div class="alert alert-success mt-3" style="padding: 10px; border-radius: 8px; margin-top: 20px;">
        <strong>üéÅ Loyalty Code:</strong> {{ bill.loyalty_code }}<br>
        <small>This code can be used once to redeem loyalty points. Don‚Äôt lose it!</small>
    </div>
    {% endif %} -->